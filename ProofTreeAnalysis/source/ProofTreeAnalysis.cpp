// ProofTreeAnalysis.cpp created by Rin Yokoyama on \date September 18, 2019
// An example of a stand alone program to run analysis using TSelector on PROOF.
// This example shows how to load libraries to PROOF servers and how to pass
// arguments to your TSelector objects in each PROOF process.
// Turn off kUseProof when you want to debug your TSelector by a debugger such as gdb.
#include <iostream>
#include "TROOT.h"
#include "TChain.h"
#include "TProof.h"
#include "TParameter.h"
#include "ROOT/TSeq.hxx"
#include "ExampleSelector.h"
#include "LibraryConfig.h"

// A flag to descide whether to use PROOF
// kTRUE : use PROOF, kFALSE : run locally
const Bool_t kUseProof = kTRUE;

// A flag for merging output tree at the end of the process when you use PROOF
// kTRUE: merge output tree at the end, kFALSE: merge only histograms
//	Each process creates a file under the folder named as its ordinal number.
// Merging these files at the end takes considerable amount of time and disk space
// when the size of the output tree is very large. 
// In such cases, you might want to set this flag to false and just chain the output files.
// ********************************************************************************************
// *** You need to give an absolute path to the output file when you set this flag to false ***
// *** otherwise worker outputs will be written under .proof directory under your $HOME     ***
// ********************************************************************************************
const Bool_t kMergeTree = kTRUE;

// The output file name without an extension
const std::string kOutputFileName = "output_tree.root";

// An example parameter that will be passed to each PROOF process.
// In this example the ExampleSelector will add kParameter to the input values.
const Double_t kParameter = 10.;

// The number of processes to run
const UInt_t kNWorkers = 2U;

int main(int argc, char** argv) {

	// Switch to the batch mode.
	gROOT->SetBatch();

	// Create a TChain from the files generated by FillGauss
	TChain* chain = new TChain("ExampleTree");
	for (auto worker_id : ROOT::TSeqI(kNWorkers)) {
		std::string name = Form("example_tree_%u.root", worker_id);
		std::cout << name << std::endl;
		chain->AddFile(name.c_str());
	}

	if (kUseProof) {
		// Open a PROOF lite session.
		auto proof = TProof::Open("lite://", Form("workers=%u", kNWorkers));

		// Load shared libraries to the PROOF server.
		const std::string lib_name = getExampleDataLibDir() + "libExampleDataLib.so";
		proof->Load(lib_name.c_str());

		// Set Proof to the chain you want to analyze.
		chain->SetProof();
		// If you want to pass parameters or strings to the PROOF processes, use AddInput().
		// The list of input objects will be accessible from the fInput pointer of the TSelector object.
		proof->AddInput(new TNamed("OutputFileName", kOutputFileName));
		proof->AddInput(new TParameter<Double_t>("Parameter", kParameter));
		proof->AddInput(new TParameter<Bool_t>("MergeTree", kMergeTree));
	
		// Start processing.
		chain->Process("ExampleSelector");
	}
	else {
		// When you don't use PROOF, create a TSelector instance, set parameters you need and run.
		ExampleSelector* selector = new ExampleSelector(chain);
		selector->SetOutputFileName(kOutputFileName);
		selector->SetParameter(kParameter);
		chain->Process(selector);
		delete selector;
	}

	delete chain;

	return 0;
}